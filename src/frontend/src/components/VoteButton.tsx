import React from "react";
import { ethers } from "ethers";

type VoteButtonProps = {
  pollId: number;
  optionId: number;
};

declare global {
  interface Window {
    ethereum?: any;
  }
}

const VoteButton: React.FC<VoteButtonProps> = ({ pollId, optionId }) => {
  const vote = async () => {
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ MetaMask
      if (!window.ethereum) {
        alert("ü¶ä –£—Å—Ç–∞–Ω–æ–≤–∏ MetaMask, —á—Ç–æ–±—ã –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å");
        return;
      }

      // 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—à–µ–ª—å–∫—É
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      await provider.send("eth_requestAccounts", []);
      const signer = provider.getSigner();
      const voter = await signer.getAddress();

      // 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ö—ç—à–∞ –≥–æ–ª–æ—Å–∞
      const messageHash = ethers.utils.solidityKeccak256(
        ["uint256", "uint256", "address"],
        [pollId, optionId, voter]
      );

      const arrayifiedHash = ethers.utils.arrayify(messageHash);

      // 4. –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const signature = await signer.signMessage(arrayifiedHash);

      // 5. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥ (relay)
      const response = await fetch(
        `${import.meta.env.VITE_BACKEND_API_URL}/relay-vote`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            poll_id: pollId,
            option_id: optionId,
            voter: voter,
            signature: signature,
          }),
        }
      );

      const data = await response.json();

      if (!response.ok) {
        alert("‚ùå –û—à–∏–±–∫–∞: " + (data.detail || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏"));
      } else {
        alert("‚úÖ –ì–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç! Tx: " + data.tx_hash);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:", error);
      alert("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫");
    }
  };

  return (
    <button onClick={vote}>
      –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –≤–∞—Ä–∏–∞–Ω—Ç #{optionId}
    </button>
  );
};

export default VoteButton;