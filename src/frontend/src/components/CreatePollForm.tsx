import React, { useState } from 'react';
import { ethers } from 'ethers';

// ‚úÖ –ò–º–ø–æ—Ä—Ç ABI
import PollSystemABI from '../../../deployments/poll_system_abi.json';
import PollTokenJson from '../../../deployments/poll_token_abi.json';
const PollTokenABI: any[] = Array.isArray(PollTokenJson) ? PollTokenJson : (PollTokenJson as any).abi;
// ‚úÖ –ê–¥—Ä–µ—Å–∞ –∏–∑ .env
const POLL_SYSTEM_ADDRESS = import.meta.env.VITE_POLL_SYSTEM_ADDRESS!;
const POLL_TOKEN_ADDRESS = import.meta.env.VITE_POLL_TOKEN_ADDRESS!;
const POLL_CREATION_FEE = ethers.utils.parseEther("100"); // 100 POLL

export default function CreatePollFormMetaMask() {
  const [question, setQuestion] = useState("");
  const [options, setOptions] = useState<string[]>(["", ""]);
  const [duration, setDuration] = useState(600); // –í —Å–µ–∫—É–Ω–¥–∞—Ö
  const [status, setStatus] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const addOption = () => setOptions([...options, ""]);
  const handleOptionChange = (i: number, value: string) => {
    const updated = [...options];
    updated[i] = value;
    setOptions(updated);
  };
  const removeOption = (index: number) => {
    if (options.length <= 2) return;
    setOptions(options.filter((_, i) => i !== index));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setStatus("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ MetaMask...");
    setLoading(true);

    try {
      if (!window.ethereum) throw new Error("ü¶ä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask");

      // –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∏ signer
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      await provider.send("eth_requestAccounts", []);
      const signer = provider.getSigner();
      const userAddress = await signer.getAddress();

      // –õ–æ–≥ –∞–¥—Ä–µ—Å–æ–≤ –∏ ABI
      console.log("üì¶ PollToken ABI sample:", PollTokenABI.find((x: any) => x.name === "balanceOf"));
      console.log("üì¨ PollToken address:", POLL_TOKEN_ADDRESS);

      // –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã
      const pollToken = new ethers.Contract(POLL_TOKEN_ADDRESS, PollTokenABI, signer);
      const pollSystem = new ethers.Contract(POLL_SYSTEM_ADDRESS, PollSystemABI, signer);

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      const balance: ethers.BigNumber = await pollToken.balanceOf(userAddress);
      if (balance.lt(POLL_CREATION_FEE)) {
        throw new Error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ POLL. –ù—É–∂–Ω–æ 100, —É –≤–∞—Å ${ethers.utils.formatEther(balance)}`);
      }

      // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ allowance
      const allowance: ethers.BigNumber = await pollToken.allowance(userAddress, POLL_SYSTEM_ADDRESS);
      if (allowance.lt(POLL_CREATION_FEE)) {
        setStatus("‚úçÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (approve) –≤ MetaMask...");
        const tx = await pollToken.approve(POLL_SYSTEM_ADDRESS, POLL_CREATION_FEE);
        await tx.wait();
        setStatus("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ");
      }

      // üöÄ –í—ã–∑–æ–≤ createPoll()
      setStatus("üì¶ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –≤ MetaMask...");
      const tx = await pollSystem.createPoll(question, options, duration);
      setStatus(`‚õì –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏... (${tx.hash})`);
      await tx.wait();
      setStatus(`‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω! Tx: ${tx.hash}`);

      // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
      setQuestion("");
      setOptions(["", ""]);
      setDuration(600);
    } catch (err: any) {
      console.error("üí• –û—à–∏–±–∫–∞:", err);
      setStatus(`‚ùå –û—à–∏–±–∫–∞: ${err.reason || err.message || "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 border p-6 rounded-md max-w-xl mx-auto bg-white text-black">
      <h2 className="text-xl font-bold">üìã –ù–æ–≤—ã–π –æ–ø—Ä–æ—Å (—á–µ—Ä–µ–∑ MetaMask)</h2>

      <div>
        <label className="block mb-1">üìù –í–æ–ø—Ä–æ—Å:</label>
        <input
          className="w-full border p-2"
          type="text"
          value={question}
          onChange={(e) => setQuestion(e.target.value)}
          required
        />
      </div>

      <div>
        <label className="block mb-1">üßæ –í–∞—Ä–∏–∞–Ω—Ç—ã:</label>
        {options.map((opt, i) => (
          <div key={i} className="flex gap-2 mb-1">
            <input
              className="flex-1 border p-2"
              value={opt}
              onChange={(e) => handleOptionChange(i, e.target.value)}
              required
            />
            {options.length > 2 && (
              <button
                type="button"
                onClick={() => removeOption(i)}
                className="text-red-500"
              >
                ‚úñÔ∏è
              </button>
            )}
          </div>
        ))}
        <button type="button" onClick={addOption} className="text-blue-600 text-sm">
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
        </button>
      </div>

      <div>
        <label className="block mb-1">‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):</label>
        <input
          type="number"
          className="border p-2 w-full"
          value={duration}
          onChange={(e) => setDuration(Number(e.target.value))}
          required
          min={1}
        />
      </div>

      <button
        type="submit"
        disabled={loading}
        className="px-4 py-2 bg-black text-white rounded disabled:opacity-40"
      >
        üöÄ –°–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ MetaMask
      </button>

      {status && (
        <p className="mt-4 whitespace-pre-wrap text-sm text-gray-800 border-t pt-2">
          {status}
        </p>
      )}
    </form>
  );
}