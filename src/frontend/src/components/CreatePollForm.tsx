import React, { useState, useEffect } from 'react';
import { ethers } from 'ethers';

// –ò–º–ø–æ—Ä—Ç ABI
import PollSystemABI from '../../../deployments/poll_system_abi.json';
import PollTokenJson from '../../../deployments/poll_token_abi.json';

const PollTokenABI: any[] = (PollTokenJson as { abi?: any[] }).abi ?? (PollTokenJson as any[]);
// –ê–¥—Ä–µ—Å–∞ –∏–∑ .env
const POLL_SYSTEM_ADDRESS = import.meta.env.VITE_POLL_SYSTEM_ADDRESS!;
const POLL_TOKEN_ADDRESS = import.meta.env.VITE_POLL_TOKEN_ADDRESS!;
const POLL_CREATION_FEE = ethers.utils.parseEther("100"); // 100 POLL

export default function CreatePollFormMetaMask() {
  const [question, setQuestion] = useState("");
  const [options, setOptions] = useState<string[]>(["", ""]);
  const [duration, setDuration] = useState(600);
  const [status, setStatus] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [faucetLoading, setFaucetLoading] = useState(false);
  const [contractOwner, setContractOwner] = useState<string | null>(null);
  const [currentUser, setCurrentUser] = useState<string | null>(null);

  const initUser = async () => {
  if (!window.ethereum) return;
  const provider = new ethers.providers.Web3Provider(window.ethereum);
  const signer = provider.getSigner();
  const address = await signer.getAddress();
  setCurrentUser(address);
};

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    checkContractOwner();
  }, []);

  useEffect(() => {
  initUser();
}, []);

  useEffect(() => {
  if (!window.ethereum) return;
  

  const handleAccountsChanged = async (accounts: string[]) => {
    if (accounts.length === 0) {
      console.warn("ü¶ä MetaMask –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω");
      setCurrentUser(null);
    } else {
      const newAddress = accounts[0];
      setCurrentUser(newAddress);

      // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
      try {
        const provider = new ethers.providers.Web3Provider(window.ethereum);
        const pollToken = new ethers.Contract(POLL_TOKEN_ADDRESS, PollTokenABI, provider);
        const balance: ethers.BigNumber = await pollToken.balanceOf(newAddress);
        console.log("üëâ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:", ethers.utils.formatEther(balance));
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", err);
      }
    }
  };

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
  window.ethereum.on('accountsChanged', handleAccountsChanged);

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  return () => {
    window.ethereum?.removeListener('accountsChanged', handleAccountsChanged);
  };
}, []);

  const checkContractOwner = async () => {
    try {
      if (!window.ethereum) return;
      
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      const contract = new ethers.Contract(
        POLL_TOKEN_ADDRESS,
        [...PollTokenABI, "function owner() external view returns (address)"],
        provider
      );
      
      const owner = await contract.owner();
      setContractOwner(owner);
      return owner;
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞:", err);
      setStatus("‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∏–º–µ–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ owner()");
      return null;
    }
  };

  const handleFaucet = async () => {
    setFaucetLoading(true);
    setStatus("‚è≥ –ó–∞–ø—Ä–æ—Å —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤...");
    
    try {
      if (!window.ethereum) throw new Error("ü¶ä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask");

      const provider = new ethers.providers.Web3Provider(window.ethereum);
      await provider.send("eth_requestAccounts", []);
      const signer = provider.getSigner();
      const userAddress = await signer.getAddress();
      setCurrentUser(userAddress);

      const pollToken = new ethers.Contract(POLL_TOKEN_ADDRESS, PollTokenABI, signer);
      
      setStatus("‚úçÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ MetaMask...");
      const tx = await pollToken.mint(userAddress, ethers.utils.parseEther("1000"));
      setStatus(`‚õì –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è... (${tx.hash})`);
      await tx.wait();
      
      setStatus("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ 1000 —Ç–µ—Å—Ç–æ–≤—ã—Ö POLL —Ç–æ–∫–µ–Ω–æ–≤!");
    } catch (err: any) {
      console.error("üí• –û—à–∏–±–∫–∞:", err);
      setStatus(`‚ùå –û—à–∏–±–∫–∞: ${err.reason || err.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã"}`);
    } finally {
      setFaucetLoading(false);
    }
  };

  const addOption = () => setOptions([...options, ""]);
  const handleOptionChange = (i: number, value: string) => {
    const updated = [...options];
    updated[i] = value;
    setOptions(updated);
  };
  const removeOption = (index: number) => {
    if (options.length <= 2) return;
    setOptions(options.filter((_, i) => i !== index));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setStatus("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ MetaMask...");
    setLoading(true);

    try {
      if (!window.ethereum) throw new Error("ü¶ä –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask");

      const provider = new ethers.providers.Web3Provider(window.ethereum);
      await provider.send("eth_requestAccounts", []);
      const signer = provider.getSigner();
      const userAddress = await signer.getAddress();
      setCurrentUser(userAddress);

      const pollToken = new ethers.Contract(POLL_TOKEN_ADDRESS, PollTokenABI, signer);
      const pollSystem = new ethers.Contract(POLL_SYSTEM_ADDRESS, PollSystemABI, signer);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      const balance: ethers.BigNumber = await pollToken.balanceOf(userAddress);
      if (balance.lt(POLL_CREATION_FEE)) {
        throw new Error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ POLL. –ù—É–∂–Ω–æ 100, —É –≤–∞—Å ${ethers.utils.formatEther(balance)}`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ allowance
      const allowance: ethers.BigNumber = await pollToken.allowance(userAddress, POLL_SYSTEM_ADDRESS);
      if (allowance.lt(POLL_CREATION_FEE)) {
        setStatus("‚úçÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (approve) –≤ MetaMask...");
        const tx = await pollToken.approve(POLL_SYSTEM_ADDRESS, POLL_CREATION_FEE);
        await tx.wait();
        setStatus("‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ");
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
      setStatus("üì¶ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –≤ MetaMask...");
      const tx = await pollSystem.createPoll(question, options, duration);
      setStatus(`‚õì –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏... (${tx.hash})`);
      await tx.wait();
      setStatus(`‚úÖ –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω! Tx: ${tx.hash}`);

      // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
      setQuestion("");
      setOptions(["", ""]);
      setDuration(600);
    } catch (err: any) {
      console.error("üí• –û—à–∏–±–∫–∞:", err);
      setStatus(`‚ùå –û—à–∏–±–∫–∞: ${err.reason || err.message || "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"}`);
    } finally {
      setLoading(false);
    }
  };

  const hasMintFunction = PollTokenABI.some(x => x.name === "mint");

  return (
    <form onSubmit={handleSubmit} className="space-y-4 border p-6 rounded-md max-w-xl mx-auto bg-white text-black">
      <h2 className="text-xl font-bold">üìã –ù–æ–≤—ã–π –æ–ø—Ä–æ—Å (—á–µ—Ä–µ–∑ MetaMask)</h2>

      {/* –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ */}
      <div className="bg-gray-50 p-3 rounded-md mb-4">
        <div className="flex justify-between items-center mb-2">
          <h3 className="font-medium">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ</h3>
          <button
            type="button"
            onClick={checkContractOwner}
            className="text-xs bg-gray-200 px-2 py-1 rounded"
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
        
        {contractOwner && (
          <p className="text-sm break-all">
            <span className="font-semibold">–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:</span> {contractOwner}
          </p>
        )}
        
        {currentUser && (
          <p className="text-sm break-all mt-1">
            <span className="font-semibold">–í–∞—à –∞–¥—Ä–µ—Å:</span> {currentUser}
          </p>
        )}

        {hasMintFunction && (
          <button
            type="button"
            onClick={handleFaucet}
            disabled={faucetLoading}
            className="mt-3 w-full px-3 py-2 bg-green-500 text-white rounded disabled:opacity-40"
          >
            {faucetLoading ? "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞..." : "ü™ô –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã (1000 POLL)"}
          </button>
        )}
      </div>

      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞ */}
      <div>
        <label className="block mb-1">üìù –í–æ–ø—Ä–æ—Å:</label>
        <input
          className="w-full border p-2 rounded"
          type="text"
          value={question}
          onChange={(e) => setQuestion(e.target.value)}
          required
        />
      </div>

      <div>
        <label className="block mb-1">üßæ –í–∞—Ä–∏–∞–Ω—Ç—ã:</label>
        {options.map((opt, i) => (
          <div key={i} className="flex gap-2 mb-1">
            <input
              className="flex-1 border p-2 rounded"
              value={opt}
              onChange={(e) => handleOptionChange(i, e.target.value)}
              required
            />
            {options.length > 2 && (
              <button
                type="button"
                onClick={() => removeOption(i)}
                className="text-red-500 px-2"
              >
                ‚úñ
              </button>
            )}
          </div>
        ))}
        <button 
          type="button" 
          onClick={addOption}
          className="text-blue-600 text-sm mt-1"
        >
          ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
        </button>
      </div>

      <div>
        <label className="block mb-1">‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):</label>
        <input
          type="number"
          className="border p-2 w-full rounded"
          value={duration}
          onChange={(e) => setDuration(Number(e.target.value))}
          required
          min={1}
        />
      </div>

      <button
        type="submit"
        disabled={loading}
        className="w-full px-4 py-2 bg-black text-white rounded disabled:opacity-40"
      >
        {loading ? "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞..." : "üöÄ –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"}
      </button>

      {status && (
        <div className="mt-4 p-3 bg-gray-50 rounded border border-gray-200">
          <p className="whitespace-pre-wrap text-sm">{status}</p>
        </div>
      )}
    </form>
  );
}